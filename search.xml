<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[javascript学习笔记(二)---BOM]]></title>
      <url>/2017/06/05/02-javascript-bom/</url>
      <content type="html"><![CDATA[<h2 id="浏览器窗口组成部分"><a href="#浏览器窗口组成部分" class="headerlink" title="浏览器窗口组成部分"></a>浏览器窗口组成部分</h2><h3 id="地址栏—location"><a href="#地址栏—location" class="headerlink" title="地址栏—location"></a>地址栏—location</h3><p>主要有属性href和两个方法reload和replace<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;button onclick=&quot;window.location.replace(&apos;http://www.baidu.com&apos;)&quot;&gt;baidu&lt;/button&gt;</div><div class="line">&lt;button onclick=&quot;window.location.href=&apos;http://www.baidu.com&apos;&quot;&gt;reload&lt;/button&gt;</div><div class="line">&lt;button onclick=&quot;window.location.reload()&quot;&gt;刷新&lt;/button&gt;</div></pre></td></tr></table></figure></p>
<p>通过更改location的href属性可以切换到新的URL，转到新页面<br>reload就是刷新页面，重新载入当前页<br>replace传入一个URL，会用对应的URL替换当前页。<br>replace和href跳转区别，前者无法返回，后者可以返回。</p>
<h3 id="历史—history"><a href="#历史—history" class="headerlink" title="历史—history"></a>历史—history</h3><p>history有三个方法<br>back() 再次访问当前URL之前的哪个URL，等价于history.go(-1)<br>forward()再次访问当前URL之后的URL，等价于history.go(1)<br>go()访问的URL在history的URL列表中的相对位置。正数向前移动，负数向后移动，如上。</p>
<h3 id="屏幕—screen"><a href="#屏幕—screen" class="headerlink" title="屏幕—screen"></a>屏幕—screen</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">	console.dir(window.screen);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>在控制台打出screen的相关属性<br><img src="/2017/06/05/02-javascript-bom/screen.png" alt=""></p>
<h3 id="浏览器相关信息—navigator"><a href="#浏览器相关信息—navigator" class="headerlink" title="浏览器相关信息—navigator"></a>浏览器相关信息—navigator</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">function navigator()&#123;</div><div class="line">		var txt = &quot;&lt;p&gt;Browser CodeName: &quot; + navigator.appCodeName + &quot;&lt;/p&gt;&quot;;//返回浏览器的代码名通常值为&quot;Mozilla&quot;</div><div class="line">		txt += &quot;&lt;p&gt;Browser Name: &quot; + navigator.appName + &quot;&lt;/p&gt;&quot;;//浏览器名称</div><div class="line">		txt += &quot;&lt;p&gt;Browser Version: &quot; + navigator.appVersion + &quot;&lt;/p&gt;&quot;;浏览器的平台和版本信息</div><div class="line">		txt += &quot;&lt;p&gt;Cookies Enabled: &quot; + navigator.cookieEnabled + &quot;&lt;/p&gt;&quot;;是否启用cookie</div><div class="line">		txt += &quot;&lt;p&gt;Platform: &quot; + navigator.platform + &quot;&lt;/p&gt;&quot;;//运行浏览器的操作系统</div><div class="line">		txt += &quot;&lt;p&gt;User-agent header: &quot; + navigator.userAgent + &quot;&lt;/p&gt;&quot;;//浏览器用于HTTP请求的用户代理头的值</div><div class="line">		txt += &quot;&lt;p&gt;User-agent language: &quot; + navigator.systemLanguage + &quot;&lt;/p&gt;&quot;;//获取系统语言</div><div class="line">		alert(txt);</div><div class="line">		&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;button onclick=&quot;navigator()&quot;&gt;点击&lt;/button&gt;</div></pre></td></tr></table></figure>
<h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p>在不同的浏览器下，javascript的代码对window以及location等属性都是标准化的，这个大家都遵守的标准就是BOM—Browser Object Model</p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>JavaScript是面向对象的语言，需要对象，而操作浏览器就需要BOM提供一个对象，操作这个对象想到于操作浏览器，类似地球和地球仪的概念。这个对象是浏览器的对象模型。</p>
<h3 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h3><p>window对象继承了Global，是全局对象，用法类似java里的this。所有的表达式都在window对象的环境中计算。同this一样，window可以省略，如window.document,省略成document。<br>window因为继承了Global，也继承了JavaScript定义的所有全局函数</p>
<h3 id="例子：显示当前时间"><a href="#例子：显示当前时间" class="headerlink" title="例子：显示当前时间"></a>例子：显示当前时间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">	window.setInterval(function() &#123;</div><div class="line">		var today = new Date();</div><div class="line">		var yy = today.getFullYear();</div><div class="line">		var mm = today.getMonth()+1;</div><div class="line">		var dd = today.getDate();</div><div class="line">		var hh = today.getHours();</div><div class="line">		var min = today.getMinutes();</div><div class="line">		var ss = today.getSeconds();</div><div class="line">		document.getElementById(&quot;myclock&quot;).innerHTML=yy+&quot;-&quot;+mm+&quot;-&quot;+dd+&quot; &quot;+hh+&quot;:&quot;+min+&quot;:&quot;+ss;</div><div class="line">	&#125;, 1000)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>在一个span中显示，id为myclock<br>window.setInterval的功能是周期性的执行括号中的代码，单位毫秒。每秒获取并显示一次当前时间，实现了钟表的效果。<br>想要做出钟表的效果还可以用setTimeout<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function showtime()&#123;</div><div class="line">	//时间代码省略</div><div class="line">		window.setTimeout(showtime, 1000);</div><div class="line">		&#125;</div><div class="line">	window.setTimeout(showtime, 1000);</div></pre></td></tr></table></figure></p>
<p>setTimeout的功能是让代码延迟运行，单位毫秒，但是代码只会执行一次，想要实现循环则需要再在外面调用一次。</p>
<h3 id="模仿京东的图片切换"><a href="#模仿京东的图片切换" class="headerlink" title="模仿京东的图片切换"></a>模仿京东的图片切换</h3><p>实现图片切换有多种方法，京东用的是更改图片的z-index值，让图片相互覆盖达成目的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">	#mydiv&#123;</div><div class="line">		position:relative;</div><div class="line">	&#125;</div><div class="line">	#mydiv img&#123;</div><div class="line">		position:absolute;</div><div class="line">		left:0px;</div><div class="line">		top:0px;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div id=&quot;mydiv&quot;&gt;</div><div class="line">	&lt;img alt=&quot;&quot; src=&quot;../imgs/58c0b2dcN78fd0fb3.jpg&quot;&gt;</div><div class="line">	&lt;img alt=&quot;&quot; src=&quot;../imgs/5925278fN8d12c7cd.jpg&quot;&gt;</div><div class="line">	&lt;img alt=&quot;&quot; src=&quot;../imgs/59258c64N1d4eea45.jpg&quot;&gt;</div><div class="line">	&lt;img alt=&quot;&quot; src=&quot;../imgs/59282748N46e975ef.jpg&quot;&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">	&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">		var index=0;</div><div class="line">		window.setInterval(function() &#123;</div><div class="line">			var imgs = document.getElementById(&quot;mydiv&quot;).getElementsByTagName(&quot;img&quot;);</div><div class="line"></div><div class="line">			for(var i=0;i&lt;imgs.length;i++)&#123;</div><div class="line">				imgs[i].style.zIndex=0;</div><div class="line">				&#125;</div><div class="line">			imgs[index].style.zIndex=1;</div><div class="line">			index++;</div><div class="line">			if(index==4)&#123;</div><div class="line">				index=0;</div><div class="line">				&#125;</div><div class="line">		&#125;, 2000);</div><div class="line">	&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure></p>
<p>先让图片通过定位都放在一个div里。<br>这里用setInterval周期性的更改图片的z-index，每次更改时要把所有图片的z-index清零。循环到第四张图片时，要再跳到第一张，更改index即可。<br><img src="/2017/06/05/02-javascript-bom/imgChange.png" alt=""> </p>
]]></content>
      
        
        <tags>
            
            <tag> -javascript -BOM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript学习笔记(一)---Begin]]></title>
      <url>/2017/06/04/01-javascript-begin/</url>
      <content type="html"><![CDATA[<h2 id="Javascript发展史"><a href="#Javascript发展史" class="headerlink" title="Javascript发展史"></a>Javascript发展史</h2><h3 id="生产历史"><a href="#生产历史" class="headerlink" title="生产历史"></a>生产历史</h3><p>javascript产生自Netscape公司，因为当时是拨号上网，网速理论能达到的最大值是56kb/s，为了提高web响应速度，javascript能做到的就是尽可能能在客户端解决的事情不让服务器去做，减少客户端向服务器发送请求响应。<br>javascript的前身是livescript，为了让这种语言流行起来，故更名为javascript。微软同时也开发了和它相同功能的语言JScript。</p>
<h3 id="jscript和javascript的统一"><a href="#jscript和javascript的统一" class="headerlink" title="jscript和javascript的统一"></a>jscript和javascript的统一</h3><p>考虑到有两种功能一样的语言运行只在不同的浏览器环境下,为了减轻程序员学习负担，国际标准化组织出面，统一两种语言，程序员只用学习一种语言即可。<br>该标准由ECMA组织制定的标准，也称为ECMAScript。其只制定了语言的核心，与运行环境无关，即可以在客户端也可以在服务器端运行。</p>
<h3 id="脚本语言"><a href="#脚本语言" class="headerlink" title="脚本语言"></a>脚本语言</h3><p>脚本语言的定义是能指挥已有程序工作的语言，就好比演员的剧本，指挥演员演什么戏。很显然Javascript就是这样的脚本语言。</p>
<h2 id="JavaScript如何操作程序"><a href="#JavaScript如何操作程序" class="headerlink" title="JavaScript如何操作程序"></a>JavaScript如何操作程序</h2><h3 id="代码计算"><a href="#代码计算" class="headerlink" title="代码计算"></a>代码计算</h3><p>比如在两个input里分别写上值，点击按钮求得和。这里需要按钮的onclick实现一个add方法，让两个input里的值相加。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">数据1&lt;input id=<span class="string">"num1"</span>&gt;</div><div class="line">数据2&lt;input id=<span class="string">"num2"</span>&gt;</div><div class="line">&lt;button onclick=<span class="string">"add()"</span>&gt;求和&lt;/button&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">	<span class="keyword">function</span> <span class="function"><span class="title">add</span></span>()&#123;</div><div class="line">		var num1=document.getElementById(<span class="string">"num1"</span>).value-0;</div><div class="line">		var num2=document.getElementById(<span class="string">"num2"</span>).value-0;</div><div class="line">		var sum = num1+num2;</div><div class="line">		alert(sum);</div><div class="line">		&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>效果图：<br><img src="/2017/06/04/01-javascript-begin/js_add.png" alt=""></p>
<h3 id="通过更改html"><a href="#通过更改html" class="headerlink" title="通过更改html"></a>通过更改html</h3><p>类似京东的图片切换<br><img src="/2017/06/04/01-javascript-begin/jd.png" alt=""><br>可以发现京东实现的图片切换原理是把所用图片放在一起，改变它们的z-index,z-index最高的图片将其余的覆盖。</p>
<h3 id="操作浏览器"><a href="#操作浏览器" class="headerlink" title="操作浏览器"></a>操作浏览器</h3><p>可以操作浏览器的地址栏，历史记录等等，也就是BOM<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">&lt;button onclick=<span class="string">"window.location.replace('http://www.baidu.com')"</span>&gt;baidu&lt;/button&gt;</div><div class="line">&lt;button onclick=<span class="string">"window.location.href='http://www.baidu.com'"</span>&gt;reload&lt;/button&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure></p>
<h2 id="Javascript书写位置"><a href="#Javascript书写位置" class="headerlink" title="Javascript书写位置"></a>Javascript书写位置</h2><h3 id="在onxxx属性中"><a href="#在onxxx属性中" class="headerlink" title="在onxxx属性中"></a>在onxxx属性中</h3><p><code>&lt;button onclick=&quot;window.alert(&#39;javascript&#39;)&quot;&gt;javascript&lt;/button&gt;</code><br>只能在当前标签中使用</p>
<h3 id="写在外部文件导入"><a href="#写在外部文件导入" class="headerlink" title="写在外部文件导入"></a>写在外部文件导入</h3><p>用script标签的src导入<br><code>&lt;script type=&quot;text\javascript&quot; src=&quot;js/add.js&quot;&gt;&lt;/script&gt;</code><br>能在任何地方使用，但是会向服务器发送多一个请求</p>
<h3 id="写在script元素内部"><a href="#写在script元素内部" class="headerlink" title="写在script元素内部"></a>写在script元素内部</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">	var index = 0;</div><div class="line">	var imgs=[&apos;58c0b2dcN78fd0fb3.jpg&apos;,&apos;5925278fN8d12c7cd.jpg&apos;,&apos;59258c64N1d4eea45.jpg&apos;,&apos;59282748N46e975ef.jpg&apos;];</div><div class="line">	window.setInterval(function() &#123;</div><div class="line">		document.getElementById(&quot;myimg&quot;).src=&quot;../imgs/&quot;+imgs[index];</div><div class="line">		if(index==3)&#123;</div><div class="line">			index=0;</div><div class="line">			&#125;</div><div class="line">		index++;</div><div class="line">	&#125;, 1000);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>能在整个网页中使用</p>
<h4 id="三种方法的可见性"><a href="#三种方法的可见性" class="headerlink" title="三种方法的可见性"></a>三种方法的可见性</h4><p>从小到大：onxx script标签 外部导入<br>三种方式不可混合使用。</p>
<h3 id="a标签里的href"><a href="#a标签里的href" class="headerlink" title="a标签里的href"></a>a标签里的href</h3><p><code>&lt;a href=&quot;javascript:alert(&quot;sb&quot;)&quot;&gt;js&lt;/a&gt;</code><br>写在a标签的href里</p>
]]></content>
      
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java网络聊天室(一)]]></title>
      <url>/2017/05/20/01-java-01bean/</url>
      <content type="html"><![CDATA[<p>网络聊天室，应用到的知识点有，多线程开发，文件与IO，网络编程，java反射机制。</p>
<h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><h4 id="com-oraclewdp-bean：实体类"><a href="#com-oraclewdp-bean：实体类" class="headerlink" title="com.oraclewdp.bean：实体类"></a>com.oraclewdp.bean：实体类</h4><p> Request.java:请求类，封装请求的信息的类。<br> Response.java:响应类，封装响应的信息的类。<br> User.java:用户类，封装用户信息的类。</p>
<h4 id="com-oraclewdp-server-config：服务器配置"><a href="#com-oraclewdp-server-config：服务器配置" class="headerlink" title="com.oraclewdp.server.config：服务器配置"></a>com.oraclewdp.server.config：服务器配置</h4><p> service.properties:服务器服务名与服务类映射资源文件。<br> ServerRunStatus.java：服务器运行状态类，封装运行时客户端列表、在线用户<br>列表、加载 service.properties 文件。</p>
<h4 id="com-oraclewdp-server-thread：服务器端线程"><a href="#com-oraclewdp-server-thread：服务器端线程" class="headerlink" title="com.oraclewdp.server.thread：服务器端线程"></a>com.oraclewdp.server.thread：服务器端线程</h4><p> ServerThread.java:服务器端服务线程类</p>
<h4 id="com-oraclewdp-server-window：服务器端窗体"><a href="#com-oraclewdp-server-window：服务器端窗体" class="headerlink" title="com.oraclewdp.server.window：服务器端窗体"></a>com.oraclewdp.server.window：服务器端窗体</h4><p> Server.java:服务器端主线程类<br> ServerWindow.java：服务器窗体类</p>
<h4 id="com-oraclewdp-service：服务器端服务接口"><a href="#com-oraclewdp-service：服务器端服务接口" class="headerlink" title="com.oraclewdp.service：服务器端服务接口"></a>com.oraclewdp.service：服务器端服务接口</h4><p> ServerService.java：服务器端服务接口</p>
<h4 id="com-oraclewdp-service-impl：服务器端各服务实现"><a href="#com-oraclewdp-service-impl：服务器端各服务实现" class="headerlink" title="com.oraclewdp.service.impl：服务器端各服务实现"></a>com.oraclewdp.service.impl：服务器端各服务实现</h4><p> AddFriendService.java:添加好友服务实现类<br> ExitService.java:关闭服务器服务的实现类<br> FriendListService.java：将好友列表发送到客户端的服务实现类<br> LoginService.java:登录服务实现类<br> MessageService.java:好友聊天信息发送服务的实现类<br> RegisterService.java:用户注册服务的实现类</p>
<h4 id="com-oraclewdp-user：用户信息"><a href="#com-oraclewdp-user：用户信息" class="headerlink" title="com.oraclewdp.user：用户信息"></a>com.oraclewdp.user：用户信息</h4><p> PropertiesOperator.java:资源文件操作类<br> user.properties:注册用户信息的资源文件<br> properties 文件组：每个用户的好友列表资源文件</p>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><h4 id="com-oraclewdp-bean：实体类-1"><a href="#com-oraclewdp-bean：实体类-1" class="headerlink" title="com.oraclewdp.bean：实体类"></a>com.oraclewdp.bean：实体类</h4><p> Request.java:请求类，封装请求的信息的类。<br> Response.java:响应类，封装响应的信息的类。<br> User.java:用户类，封装用户信息的类。</p>
<h4 id="com-oraclewdp-client-config-客户端配置"><a href="#com-oraclewdp-client-config-客户端配置" class="headerlink" title="com.oraclewdp.client.config:客户端配置"></a>com.oraclewdp.client.config:客户端配置</h4><p> ServerAddress.properties：服务器配置资源文件<br> Processing.properties：处理名与处理实现类映射资源文件<br> ClientRunStatus.java:客户端运行状态类，读取资源文件、封装消息窗体、记录<br>用户和 Socket 对象</p>
<h4 id="com-oraclewdp-client-monitor-客户端事件监听器"><a href="#com-oraclewdp-client-monitor-客户端事件监听器" class="headerlink" title="com.oraclewdp.client.monitor:客户端事件监听器"></a>com.oraclewdp.client.monitor:客户端事件监听器</h4><p> FriendButtonMonitor.java：添加好友事件监听器<br> FriendMouseMonitor.java：好友列表双击事件监听器<br> FriendWindowMonitor.java：好友窗体事件监听器<br> LoginButtonMonitor.java：登录按钮事件监听器<br> MessageButtonMonitor.java：信息窗体按钮单击事件监听器<br> RegisterButtonMonitor.java：用户注册监听器</p>
<h4 id="com-oraclewdp-client-thread-客户端线程"><a href="#com-oraclewdp-client-thread-客户端线程" class="headerlink" title="com.oraclewdp.client.thread:客户端线程"></a>com.oraclewdp.client.thread:客户端线程</h4><p> ClientThread.java：客户端线程类</p>
<h4 id="com-oraclewdp-client-window-客户端窗体"><a href="#com-oraclewdp-client-window-客户端窗体" class="headerlink" title="com.oraclewdp.client.window:客户端窗体"></a>com.oraclewdp.client.window:客户端窗体</h4><p> FriendWindow.java：客户端好友窗体<br> LoginWindow.java：登录窗体<br> MessageDialog.java：消息框<br> MessageWindow.java：好友聊天窗体<br> RegisterWindow.java：用户注册窗体</p>
<h4 id="com-oraclewdp-processing-客户端处理"><a href="#com-oraclewdp-processing-客户端处理" class="headerlink" title="com.oraclewdp.processing:客户端处理"></a>com.oraclewdp.processing:客户端处理</h4><p> ClientProcessing.java：客户端处理接口</p>
<h4 id="com-oraclewdp-processing-impl-客户端处理实现类"><a href="#com-oraclewdp-processing-impl-客户端处理实现类" class="headerlink" title="com.oraclewdp.processing.impl:客户端处理实现类"></a>com.oraclewdp.processing.impl:客户端处理实现类</h4><p> AddFriendProcessing.java：添加好友处理实现类<br> FriendListProcessing.java：好友列表处理实现类<br> LoginProcessing.java：登录处理实现类<br> MessageProcessing.java：消息处理实现类</p>
<h4 id="com-oraclewdp-util-客户端处理"><a href="#com-oraclewdp-util-客户端处理" class="headerlink" title="com.oraclewdp.util:客户端处理"></a>com.oraclewdp.util:客户端处理</h4><p> ClientUtil.java：客户端功能类</p>
<h2 id="服务器-1"><a href="#服务器-1" class="headerlink" title="服务器"></a>服务器</h2><h3 id="设置请求文件Request"><a href="#设置请求文件Request" class="headerlink" title="设置请求文件Request"></a>设置请求文件Request</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public class Request implements Serializable &#123;</div><div class="line">	private static final long serialVersionUID = 1L;</div><div class="line">	private String requestServiceName;//请求服务名属性</div><div class="line">	//用户属性</div><div class="line">	private User user;//当前用户</div><div class="line">	private User toUser;//接收消息用户</div><div class="line">	private String message;//用户发送消息</div><div class="line">	</div><div class="line">	public String <span class="function"><span class="title">getMessage</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> message;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>Message(String message) &#123;</div><div class="line">		this.message = message;</div><div class="line">	&#125;</div><div class="line">	public String <span class="function"><span class="title">getRequestServiceName</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> requestServiceName;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>RequestServiceName(String requestServiceName) &#123;</div><div class="line">		this.requestServiceName = requestServiceName;</div><div class="line">	&#125;</div><div class="line">	public User <span class="function"><span class="title">getUser</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> user;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>User(User user) &#123;</div><div class="line">		this.user = user;</div><div class="line">	&#125;</div><div class="line">	public User <span class="function"><span class="title">getToUser</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> toUser;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>ToUser(User toUser) &#123;</div><div class="line">		this.toUser = toUser;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="设置响应文件Response"><a href="#设置响应文件Response" class="headerlink" title="设置响应文件Response"></a>设置响应文件Response</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">public class Response implements Serializable &#123;</div><div class="line">	private static final long serialVersionUID = 1L;</div><div class="line">	//responseCode值</div><div class="line">	//登陆情况反馈</div><div class="line">	public static final int LOGIN_SUCCESS = 100;</div><div class="line">	public static final int LOGIN_USERNAME_INVALID = 101;</div><div class="line">	public static final int LOGIN_PASSWORD_ERROR = 102;</div><div class="line">	//注册情况反馈</div><div class="line">	public static final int REGISTER_SUCCESS = 200;</div><div class="line">	public static final int REGISTER_FAIL = 201;</div><div class="line">	//添加好友情况反馈</div><div class="line">	public static final int ADDFRIEND_SUCCESS = 300;</div><div class="line">	public static final int ADDFRIEND_FAIL = 301;</div><div class="line">	public static final int ADDFRIEND_FAIL_ISFRIEND = 302;</div><div class="line">	</div><div class="line">	private String responseServiceName;</div><div class="line">	private int responseCode;</div><div class="line">	private User fromUser;</div><div class="line">	private User toUser;</div><div class="line">	private List&lt;User&gt; friendList;</div><div class="line">	private String message;</div><div class="line">	public String <span class="function"><span class="title">getMessage</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> message;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>Message(String message) &#123;</div><div class="line">		this.message = message;</div><div class="line">	&#125;</div><div class="line">	public String <span class="function"><span class="title">getResponseServiceName</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> responseServiceName;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>ResponseServiceName(String responseServiceName) &#123;</div><div class="line">		this.responseServiceName = responseServiceName;</div><div class="line">	&#125;</div><div class="line">	public int <span class="function"><span class="title">getResponseCode</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> responseCode;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>ResponseCode(int responseCode) &#123;</div><div class="line">		this.responseCode = responseCode;</div><div class="line">	&#125;</div><div class="line">	public User <span class="function"><span class="title">getFromUser</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> fromUser;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>FromUser(User fromUser) &#123;</div><div class="line">		this.fromUser = fromUser;</div><div class="line">	&#125;</div><div class="line">	public User <span class="function"><span class="title">getToUser</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> toUser;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>ToUser(User toUser) &#123;</div><div class="line">		this.toUser = toUser;</div><div class="line">	&#125;</div><div class="line">	public List&lt;User&gt; <span class="function"><span class="title">getFriendList</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> friendList;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>FriendList(List&lt;User&gt; friendList) &#123;</div><div class="line">		this.friendList = friendList;</div><div class="line">	&#125;</div><div class="line">	/**</div><div class="line">	 * 向客户端发送响应</div><div class="line">	 * @param socket</div><div class="line">	 */</div><div class="line">	public void send(Socket socket) &#123;</div><div class="line">		try &#123;</div><div class="line">			OutputStream <span class="keyword">in</span> = socket.getOutputStream();</div><div class="line">			ObjectOutputStream oos = new ObjectOutputStream(<span class="keyword">in</span>);</div><div class="line">			oos.writeObject(this);</div><div class="line">			oos.flush();</div><div class="line">		&#125; catch (IOException e) &#123;</div><div class="line">			// TODO Auto-generated catch block</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	public void send(ObjectOutputStream oos)&#123;</div><div class="line">		try &#123;</div><div class="line">			oos.writeObject(this);</div><div class="line">			oos.flush();</div><div class="line">		&#125; catch (IOException e) &#123;</div><div class="line">			// TODO Auto-generated catch block</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="用户设置User"><a href="#用户设置User" class="headerlink" title="用户设置User"></a>用户设置User</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">public class User implements Serializable,Comparable&lt;User&gt; &#123;</div><div class="line">	</div><div class="line">	private static final long serialVersionUID = 1L;</div><div class="line">	private int id;</div><div class="line">	private String <span class="built_in">pwd</span>;</div><div class="line">	private String name;</div><div class="line">	private int age;</div><div class="line">	private String phone;</div><div class="line">	private String address;</div><div class="line">	private String ip;</div><div class="line">	private int port;</div><div class="line">	private boolean online;</div><div class="line"></div><div class="line">	//属性的getter setter方法，不予赘述</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String <span class="function"><span class="title">toString</span></span>() &#123;</div><div class="line">		String value = this.online?<span class="string">"在线"</span>:<span class="string">"离线"</span>;</div><div class="line">		<span class="built_in">return</span> this.name+<span class="string">"【"</span>+value+<span class="string">"】"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public boolean equals(Object obj) &#123;</div><div class="line">		<span class="keyword">if</span> (obj instanceof User) &#123;</div><div class="line">			User user = (User) obj;</div><div class="line">			String ip = this.getIp();</div><div class="line">			<span class="keyword">if</span>(this.getId()==user.getId())&#123;</div><div class="line">				<span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (ip != null &amp;&amp; !<span class="string">""</span>.equals(ip)) &#123;</div><div class="line">				<span class="keyword">if</span> (this.getIp().equals(user.getIp())</div><div class="line">						&amp;&amp; this.getPort() == user.getPort()) &#123;</div><div class="line">					<span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					<span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> super.equals(obj);</div><div class="line">	&#125;</div><div class="line">	@Override</div><div class="line">	public int compareTo(User o) &#123;</div><div class="line">		<span class="keyword">if</span>(this.isOnline()&amp;&amp;!o.isOnline())&#123;</div><div class="line">			<span class="built_in">return</span> 1;</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(this.isOnline()==o.isOnline())&#123;</div><div class="line">			<span class="built_in">return</span> this.getName().compareTo(o.getName());</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="built_in">return</span> -1;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		List&lt;User&gt; list = new ArrayList&lt;User&gt;();</div><div class="line">		User user = new User();</div><div class="line">		user.setAddress(<span class="string">"1"</span>);</div><div class="line">		user.setPort(1);</div><div class="line">		list.add(user);</div><div class="line">		System.out.println(list.size());</div><div class="line">		User u1 = new User();</div><div class="line">		u1.setAddress(<span class="string">"1"</span>);</div><div class="line">		u1.setPort(1);</div><div class="line">		list.remove(u1);</div><div class="line">		System.out.println(user.equals(u1));</div><div class="line">		System.out.println(list.size());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h2><p>客户端的设置基本同服务器端</p>
]]></content>
      
        
        <tags>
            
            <tag> Socket </tag>
            
            <tag> 多线程 </tag>
            
            <tag> Hexo </tag>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的个人博客]]></title>
      <url>/2017/05/19/new-day/</url>
      <content type="html"><![CDATA[<p>从创建个人博客这个想法诞生开始，用了大概3天的时间，才把这个博客大致建成了。从今天开始，每天都会更新内容，用来记录每日所学，生活上的点点滴滴。</p>
<h2 id="认识自我"><a href="#认识自我" class="headerlink" title="认识自我"></a>认识自我</h2><p>首先做个自我介绍，目前我是一名大三的，软件专业的在校学生，面临着就业压力。<br>知识技能方面，学了有3年的java，学过html，javascript。<br>目标是做全栈工程师。<br>个人经历：在校期间曾经参加过一个购物网站项目组，负责前端设计。还参加过一个论坛的运营小组。<br>自我认知，基础是有，但是过于基础，认为自己学到的和今后工作中需求的还有一定差距，需要与工作接轨，需要学习更多的知识。<br>在这些前提下，我创建了这个博客。</p>
<h2 id="个人博客创建过程"><a href="#个人博客创建过程" class="headerlink" title="个人博客创建过程"></a>个人博客创建过程</h2><p>写博客是我在大一期间就有的一个习惯，当时在学习java，记录一些笔记，知识点，不过是在一些第三方平台写的，当然比起这种个人博客来说，逼格差了很多。那时候我也知道做个人博客的大致过程，也会使用github。现在我也忘记了当时自己怎么想的，怕不是失了知，就是觉得自己用别人的一套博客系统来写就行了，没必要创建一个个人博客，再说每年域名不也是开销么233.现在想想真是可笑。<br>到了今天才醒悟过来，虽然很晚，但还不迟。<br>创建博客的具体教程我就不细说了，毕竟网上各种教程一搜一大堆。<br>这里只想谈谈对个人博客的认识。<br>个人博客说具体就是一个网站，这个网站是你自己创建的，自己去购买域名购买空间。如果网站出了问题，需要自己去维护。而第三方的博客就不需要了。比较起来个人博客虽然麻烦些，但是是你自己的东西，你想添加什么功能都可以，更加的开放，这点对一个程序员来说很重要。程序员需要交流技术，分享技术，从中获取新知识，新技术。<br>举个例子，在创建个人博客前，我对markdown是一知半解，以前很少写过markdown文档，而今后所有的博文都要用markdown来写，这对我来说是一种新技术，通过博客创建我渐渐掌握了这种技术，这种学习过程和经历是普通博客无法带来的。</p>
<h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>我希望可以通过个人博客，分享学习知识，这是一种良性的学习方式，毕竟能向大家展示的东西都是自己确确实实掌握的。算是一种对自己学习成果的认证。</p>
]]></content>
      
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[the first blog]]></title>
      <url>/2017/05/18/the-first-blog/</url>
      <content type="html"><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h3><h3 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">       var loadComment = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">           var d = document, s = d.createElement(<span class="string">'script'</span>);</div><div class="line">           s.src = <span class="string">'http://v2.uyan.cc/code/uyan.js?uid=&lt;%= theme.youyan.id%&gt;'</span>;</div><div class="line">           (d.head || d.body).appendChild(s);</div><div class="line">       &#125;</div><div class="line">   &lt;/script&gt;</div><div class="line">   &lt;%- partial(<span class="string">'click2show'</span>) %&gt;</div><div class="line">   &lt;div id=<span class="string">"uyan_frame"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"> 			var loadComment = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">           var d = document, s = d.createElement(<span class="string">'script'</span>);</div><div class="line">           s.src = <span class="string">'http://v2.uyan.cc/code/uyan.js?uid=&lt;%= theme.youyan.id%&gt;'</span>;</div><div class="line">           (d.head || d.body).appendChild(s);</div><div class="line">       &#125;</div><div class="line">   &lt;/script&gt;</div><div class="line">   &lt;%- partial(<span class="string">'click2show'</span>) %&gt;</div><div class="line">   &lt;div id=<span class="string">"uyan_frame"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/05/17/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
