<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[01-java-02Server]]></title>
      <url>/2017/05/20/01-java-02Server/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[java网络聊天室(一)]]></title>
      <url>/2017/05/20/01-java-01bean/</url>
      <content type="html"><![CDATA[<p>网络聊天室，应用到的知识点有，多线程开发，文件与IO，网络编程，java反射机制。</p>
<h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><h4 id="com-oraclewdp-bean：实体类"><a href="#com-oraclewdp-bean：实体类" class="headerlink" title="com.oraclewdp.bean：实体类"></a>com.oraclewdp.bean：实体类</h4><p> Request.java:请求类，封装请求的信息的类。<br> Response.java:响应类，封装响应的信息的类。<br> User.java:用户类，封装用户信息的类。</p>
<h4 id="com-oraclewdp-server-config：服务器配置"><a href="#com-oraclewdp-server-config：服务器配置" class="headerlink" title="com.oraclewdp.server.config：服务器配置"></a>com.oraclewdp.server.config：服务器配置</h4><p> service.properties:服务器服务名与服务类映射资源文件。<br> ServerRunStatus.java：服务器运行状态类，封装运行时客户端列表、在线用户<br>列表、加载 service.properties 文件。</p>
<h4 id="com-oraclewdp-server-thread：服务器端线程"><a href="#com-oraclewdp-server-thread：服务器端线程" class="headerlink" title="com.oraclewdp.server.thread：服务器端线程"></a>com.oraclewdp.server.thread：服务器端线程</h4><p> ServerThread.java:服务器端服务线程类</p>
<h4 id="com-oraclewdp-server-window：服务器端窗体"><a href="#com-oraclewdp-server-window：服务器端窗体" class="headerlink" title="com.oraclewdp.server.window：服务器端窗体"></a>com.oraclewdp.server.window：服务器端窗体</h4><p> Server.java:服务器端主线程类<br> ServerWindow.java：服务器窗体类</p>
<h4 id="com-oraclewdp-service：服务器端服务接口"><a href="#com-oraclewdp-service：服务器端服务接口" class="headerlink" title="com.oraclewdp.service：服务器端服务接口"></a>com.oraclewdp.service：服务器端服务接口</h4><p> ServerService.java：服务器端服务接口</p>
<h4 id="com-oraclewdp-service-impl：服务器端各服务实现"><a href="#com-oraclewdp-service-impl：服务器端各服务实现" class="headerlink" title="com.oraclewdp.service.impl：服务器端各服务实现"></a>com.oraclewdp.service.impl：服务器端各服务实现</h4><p> AddFriendService.java:添加好友服务实现类<br> ExitService.java:关闭服务器服务的实现类<br> FriendListService.java：将好友列表发送到客户端的服务实现类<br> LoginService.java:登录服务实现类<br> MessageService.java:好友聊天信息发送服务的实现类<br> RegisterService.java:用户注册服务的实现类</p>
<h4 id="com-oraclewdp-user：用户信息"><a href="#com-oraclewdp-user：用户信息" class="headerlink" title="com.oraclewdp.user：用户信息"></a>com.oraclewdp.user：用户信息</h4><p> PropertiesOperator.java:资源文件操作类<br> user.properties:注册用户信息的资源文件<br> properties 文件组：每个用户的好友列表资源文件</p>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><h4 id="com-oraclewdp-bean：实体类-1"><a href="#com-oraclewdp-bean：实体类-1" class="headerlink" title="com.oraclewdp.bean：实体类"></a>com.oraclewdp.bean：实体类</h4><p> Request.java:请求类，封装请求的信息的类。<br> Response.java:响应类，封装响应的信息的类。<br> User.java:用户类，封装用户信息的类。</p>
<h4 id="com-oraclewdp-client-config-客户端配置"><a href="#com-oraclewdp-client-config-客户端配置" class="headerlink" title="com.oraclewdp.client.config:客户端配置"></a>com.oraclewdp.client.config:客户端配置</h4><p> ServerAddress.properties：服务器配置资源文件<br> Processing.properties：处理名与处理实现类映射资源文件<br> ClientRunStatus.java:客户端运行状态类，读取资源文件、封装消息窗体、记录<br>用户和 Socket 对象</p>
<h4 id="com-oraclewdp-client-monitor-客户端事件监听器"><a href="#com-oraclewdp-client-monitor-客户端事件监听器" class="headerlink" title="com.oraclewdp.client.monitor:客户端事件监听器"></a>com.oraclewdp.client.monitor:客户端事件监听器</h4><p> FriendButtonMonitor.java：添加好友事件监听器<br> FriendMouseMonitor.java：好友列表双击事件监听器<br> FriendWindowMonitor.java：好友窗体事件监听器<br> LoginButtonMonitor.java：登录按钮事件监听器<br> MessageButtonMonitor.java：信息窗体按钮单击事件监听器<br> RegisterButtonMonitor.java：用户注册监听器</p>
<h4 id="com-oraclewdp-client-thread-客户端线程"><a href="#com-oraclewdp-client-thread-客户端线程" class="headerlink" title="com.oraclewdp.client.thread:客户端线程"></a>com.oraclewdp.client.thread:客户端线程</h4><p> ClientThread.java：客户端线程类</p>
<h4 id="com-oraclewdp-client-window-客户端窗体"><a href="#com-oraclewdp-client-window-客户端窗体" class="headerlink" title="com.oraclewdp.client.window:客户端窗体"></a>com.oraclewdp.client.window:客户端窗体</h4><p> FriendWindow.java：客户端好友窗体<br> LoginWindow.java：登录窗体<br> MessageDialog.java：消息框<br> MessageWindow.java：好友聊天窗体<br> RegisterWindow.java：用户注册窗体</p>
<h4 id="com-oraclewdp-processing-客户端处理"><a href="#com-oraclewdp-processing-客户端处理" class="headerlink" title="com.oraclewdp.processing:客户端处理"></a>com.oraclewdp.processing:客户端处理</h4><p> ClientProcessing.java：客户端处理接口</p>
<h4 id="com-oraclewdp-processing-impl-客户端处理实现类"><a href="#com-oraclewdp-processing-impl-客户端处理实现类" class="headerlink" title="com.oraclewdp.processing.impl:客户端处理实现类"></a>com.oraclewdp.processing.impl:客户端处理实现类</h4><p> AddFriendProcessing.java：添加好友处理实现类<br> FriendListProcessing.java：好友列表处理实现类<br> LoginProcessing.java：登录处理实现类<br> MessageProcessing.java：消息处理实现类</p>
<h4 id="com-oraclewdp-util-客户端处理"><a href="#com-oraclewdp-util-客户端处理" class="headerlink" title="com.oraclewdp.util:客户端处理"></a>com.oraclewdp.util:客户端处理</h4><p> ClientUtil.java：客户端功能类</p>
<h2 id="服务器-1"><a href="#服务器-1" class="headerlink" title="服务器"></a>服务器</h2><h3 id="设置请求文件Request"><a href="#设置请求文件Request" class="headerlink" title="设置请求文件Request"></a>设置请求文件Request</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public class Request implements Serializable &#123;</div><div class="line">	private static final long serialVersionUID = 1L;</div><div class="line">	private String requestServiceName;//请求服务名属性</div><div class="line">	//用户属性</div><div class="line">	private User user;//当前用户</div><div class="line">	private User toUser;//接收消息用户</div><div class="line">	private String message;//用户发送消息</div><div class="line">	</div><div class="line">	public String <span class="function"><span class="title">getMessage</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> message;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>Message(String message) &#123;</div><div class="line">		this.message = message;</div><div class="line">	&#125;</div><div class="line">	public String <span class="function"><span class="title">getRequestServiceName</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> requestServiceName;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>RequestServiceName(String requestServiceName) &#123;</div><div class="line">		this.requestServiceName = requestServiceName;</div><div class="line">	&#125;</div><div class="line">	public User <span class="function"><span class="title">getUser</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> user;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>User(User user) &#123;</div><div class="line">		this.user = user;</div><div class="line">	&#125;</div><div class="line">	public User <span class="function"><span class="title">getToUser</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> toUser;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>ToUser(User toUser) &#123;</div><div class="line">		this.toUser = toUser;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="设置响应文件Response"><a href="#设置响应文件Response" class="headerlink" title="设置响应文件Response"></a>设置响应文件Response</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">public class Response implements Serializable &#123;</div><div class="line">	private static final long serialVersionUID = 1L;</div><div class="line">	//responseCode值</div><div class="line">	//登陆情况反馈</div><div class="line">	public static final int LOGIN_SUCCESS = 100;</div><div class="line">	public static final int LOGIN_USERNAME_INVALID = 101;</div><div class="line">	public static final int LOGIN_PASSWORD_ERROR = 102;</div><div class="line">	//注册情况反馈</div><div class="line">	public static final int REGISTER_SUCCESS = 200;</div><div class="line">	public static final int REGISTER_FAIL = 201;</div><div class="line">	//添加好友情况反馈</div><div class="line">	public static final int ADDFRIEND_SUCCESS = 300;</div><div class="line">	public static final int ADDFRIEND_FAIL = 301;</div><div class="line">	public static final int ADDFRIEND_FAIL_ISFRIEND = 302;</div><div class="line">	</div><div class="line">	private String responseServiceName;</div><div class="line">	private int responseCode;</div><div class="line">	private User fromUser;</div><div class="line">	private User toUser;</div><div class="line">	private List&lt;User&gt; friendList;</div><div class="line">	private String message;</div><div class="line">	public String <span class="function"><span class="title">getMessage</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> message;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>Message(String message) &#123;</div><div class="line">		this.message = message;</div><div class="line">	&#125;</div><div class="line">	public String <span class="function"><span class="title">getResponseServiceName</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> responseServiceName;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>ResponseServiceName(String responseServiceName) &#123;</div><div class="line">		this.responseServiceName = responseServiceName;</div><div class="line">	&#125;</div><div class="line">	public int <span class="function"><span class="title">getResponseCode</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> responseCode;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>ResponseCode(int responseCode) &#123;</div><div class="line">		this.responseCode = responseCode;</div><div class="line">	&#125;</div><div class="line">	public User <span class="function"><span class="title">getFromUser</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> fromUser;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>FromUser(User fromUser) &#123;</div><div class="line">		this.fromUser = fromUser;</div><div class="line">	&#125;</div><div class="line">	public User <span class="function"><span class="title">getToUser</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> toUser;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>ToUser(User toUser) &#123;</div><div class="line">		this.toUser = toUser;</div><div class="line">	&#125;</div><div class="line">	public List&lt;User&gt; <span class="function"><span class="title">getFriendList</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> friendList;</div><div class="line">	&#125;</div><div class="line">	public void <span class="built_in">set</span>FriendList(List&lt;User&gt; friendList) &#123;</div><div class="line">		this.friendList = friendList;</div><div class="line">	&#125;</div><div class="line">	/**</div><div class="line">	 * 向客户端发送响应</div><div class="line">	 * @param socket</div><div class="line">	 */</div><div class="line">	public void send(Socket socket) &#123;</div><div class="line">		try &#123;</div><div class="line">			OutputStream <span class="keyword">in</span> = socket.getOutputStream();</div><div class="line">			ObjectOutputStream oos = new ObjectOutputStream(<span class="keyword">in</span>);</div><div class="line">			oos.writeObject(this);</div><div class="line">			oos.flush();</div><div class="line">		&#125; catch (IOException e) &#123;</div><div class="line">			// TODO Auto-generated catch block</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	public void send(ObjectOutputStream oos)&#123;</div><div class="line">		try &#123;</div><div class="line">			oos.writeObject(this);</div><div class="line">			oos.flush();</div><div class="line">		&#125; catch (IOException e) &#123;</div><div class="line">			// TODO Auto-generated catch block</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="用户设置User"><a href="#用户设置User" class="headerlink" title="用户设置User"></a>用户设置User</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">public class User implements Serializable,Comparable&lt;User&gt; &#123;</div><div class="line">	</div><div class="line">	private static final long serialVersionUID = 1L;</div><div class="line">	private int id;</div><div class="line">	private String <span class="built_in">pwd</span>;</div><div class="line">	private String name;</div><div class="line">	private int age;</div><div class="line">	private String phone;</div><div class="line">	private String address;</div><div class="line">	private String ip;</div><div class="line">	private int port;</div><div class="line">	private boolean online;</div><div class="line"></div><div class="line">	//属性的getter setter方法，不予赘述</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public String <span class="function"><span class="title">toString</span></span>() &#123;</div><div class="line">		String value = this.online?<span class="string">"在线"</span>:<span class="string">"离线"</span>;</div><div class="line">		<span class="built_in">return</span> this.name+<span class="string">"【"</span>+value+<span class="string">"】"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public boolean equals(Object obj) &#123;</div><div class="line">		<span class="keyword">if</span> (obj instanceof User) &#123;</div><div class="line">			User user = (User) obj;</div><div class="line">			String ip = this.getIp();</div><div class="line">			<span class="keyword">if</span>(this.getId()==user.getId())&#123;</div><div class="line">				<span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (ip != null &amp;&amp; !<span class="string">""</span>.equals(ip)) &#123;</div><div class="line">				<span class="keyword">if</span> (this.getIp().equals(user.getIp())</div><div class="line">						&amp;&amp; this.getPort() == user.getPort()) &#123;</div><div class="line">					<span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					<span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> super.equals(obj);</div><div class="line">	&#125;</div><div class="line">	@Override</div><div class="line">	public int compareTo(User o) &#123;</div><div class="line">		<span class="keyword">if</span>(this.isOnline()&amp;&amp;!o.isOnline())&#123;</div><div class="line">			<span class="built_in">return</span> 1;</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(this.isOnline()==o.isOnline())&#123;</div><div class="line">			<span class="built_in">return</span> this.getName().compareTo(o.getName());</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="built_in">return</span> -1;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		List&lt;User&gt; list = new ArrayList&lt;User&gt;();</div><div class="line">		User user = new User();</div><div class="line">		user.setAddress(<span class="string">"1"</span>);</div><div class="line">		user.setPort(1);</div><div class="line">		list.add(user);</div><div class="line">		System.out.println(list.size());</div><div class="line">		User u1 = new User();</div><div class="line">		u1.setAddress(<span class="string">"1"</span>);</div><div class="line">		u1.setPort(1);</div><div class="line">		list.remove(u1);</div><div class="line">		System.out.println(user.equals(u1));</div><div class="line">		System.out.println(list.size());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h2><p>客户端的设置基本同服务器端</p>
]]></content>
      
        
        <tags>
            
            <tag> Socket </tag>
            
            <tag> 多线程 </tag>
            
            <tag> Hexo </tag>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的个人博客]]></title>
      <url>/2017/05/19/new-day/</url>
      <content type="html"><![CDATA[<p>从创建个人博客这个想法诞生开始，用了大概3天的时间，才把这个博客大致建成了。从今天开始，每天都会更新内容，用来记录每日所学，生活上的点点滴滴。</p>
<h2 id="认识自我"><a href="#认识自我" class="headerlink" title="认识自我"></a>认识自我</h2><p>首先做个自我介绍，目前我是一名大三的，软件专业的在校学生，面临着就业压力。<br>知识技能方面，学了有3年的java，学过html，javascript。<br>目标是做全栈工程师。<br>个人经历：在校期间曾经参加过一个购物网站项目组，负责前端设计。还参加过一个论坛的运营小组。<br>自我认知，基础是有，但是过于基础，认为自己学到的和今后工作中需求的还有一定差距，需要与工作接轨，需要学习更多的知识。<br>在这些前提下，我创建了这个博客。</p>
<h2 id="个人博客创建过程"><a href="#个人博客创建过程" class="headerlink" title="个人博客创建过程"></a>个人博客创建过程</h2><p>写博客是我在大一期间就有的一个习惯，当时在学习java，记录一些笔记，知识点，不过是在一些第三方平台写的，当然比起这种个人博客来说，逼格差了很多。那时候我也知道做个人博客的大致过程，也会使用github。现在我也忘记了当时自己怎么想的，怕不是失了知，就是觉得自己用别人的一套博客系统来写就行了，没必要创建一个个人博客，再说每年域名不也是开销么233.现在想想真是可笑。<br>到了今天才醒悟过来，虽然很晚，但还不迟。<br>创建博客的具体教程我就不细说了，毕竟网上各种教程一搜一大堆。<br>这里只想谈谈对个人博客的认识。<br>个人博客说具体就是一个网站，这个网站是你自己创建的，自己去购买域名购买空间。如果网站出了问题，需要自己去维护。而第三方的博客就不需要了。比较起来个人博客虽然麻烦些，但是是你自己的东西，你想添加什么功能都可以，更加的开放，这点对一个程序员来说很重要。程序员需要交流技术，分享技术，从中获取新知识，新技术。<br>举个例子，在创建个人博客前，我对markdown是一知半解，以前很少写过markdown文档，而今后所有的博文都要用markdown来写，这对我来说是一种新技术，通过博客创建我渐渐掌握了这种技术，这种学习过程和经历是普通博客无法带来的。</p>
<h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>我希望可以通过个人博客，分享学习知识，这是一种良性的学习方式，毕竟能向大家展示的东西都是自己确确实实掌握的。算是一种对自己学习成果的认证。</p>
]]></content>
      
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[the first blog]]></title>
      <url>/2017/05/18/the-first-blog/</url>
      <content type="html"><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h3><h3 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">       var loadComment = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">           var d = document, s = d.createElement(<span class="string">'script'</span>);</div><div class="line">           s.src = <span class="string">'http://v2.uyan.cc/code/uyan.js?uid=&lt;%= theme.youyan.id%&gt;'</span>;</div><div class="line">           (d.head || d.body).appendChild(s);</div><div class="line">       &#125;</div><div class="line">   &lt;/script&gt;</div><div class="line">   &lt;%- partial(<span class="string">'click2show'</span>) %&gt;</div><div class="line">   &lt;div id=<span class="string">"uyan_frame"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"> 			var loadComment = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">           var d = document, s = d.createElement(<span class="string">'script'</span>);</div><div class="line">           s.src = <span class="string">'http://v2.uyan.cc/code/uyan.js?uid=&lt;%= theme.youyan.id%&gt;'</span>;</div><div class="line">           (d.head || d.body).appendChild(s);</div><div class="line">       &#125;</div><div class="line">   &lt;/script&gt;</div><div class="line">   &lt;%- partial(<span class="string">'click2show'</span>) %&gt;</div><div class="line">   &lt;div id=<span class="string">"uyan_frame"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/05/17/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
